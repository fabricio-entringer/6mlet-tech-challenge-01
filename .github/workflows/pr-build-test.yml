name: Build and Test PR

on:
  pull_request:
    branches: [develop]
    types: [opened, synchronize, reopened]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Lint with flake8 (optional)
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true

    - name: Test with pytest
      run: |
        # Create data directory and copy sample data for testing
        mkdir -p data
        cp data/sample_books_data.csv data/books_data.csv
        pytest tests/ -v --tb=short

    - name: Test application startup
      run: |
        # Ensure data is available for app startup test
        mkdir -p data
        cp data/sample_books_data.csv data/books_data.csv
        python -c "from app.main import app; print('App imported successfully')"
        timeout 10s python run.py &
        sleep 5
        curl -f http://localhost:8000/api/v1/health || exit 1
        curl -f http://localhost:8000/version || exit 1
        pkill -f "python run.py" || true

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build

    - name: Build package
      run: |
        python -m build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: dist/
        retention-days: 7

#  security-scan:
#    runs-on: ubuntu-latest
#    needs: test
#
#    steps:
#    - name: Checkout code
#      uses: actions/checkout@v4
#
#    - name: Set up Python 3.12
#      uses: actions/setup-python@v4
#      with:
#        python-version: "3.12"
#
#    - name: Install dependencies
#      run: |
#        python -m pip install --upgrade pip
#        pip install -r requirements.txt
#        pip install safety bandit
#
#    - name: Run safety check
#      run: |
#        safety check --json || true
#
#    - name: Run bandit security scan
#      run: |
#        bandit -r app/ -f json || true

#  code-quality:
#    runs-on: ubuntu-latest
#    needs: test
#
#    steps:
#    - name: Checkout code
#      uses: actions/checkout@v4
#
#    - name: Set up Python 3.12
#      uses: actions/setup-python@v4
#      with:
#        python-version: "3.12"
#
#    - name: Install dependencies
#      run: |
#        python -m pip install --upgrade pip
#        pip install -r requirements.txt
#        pip install black isort mypy
#
#    - name: Check code formatting with black
#      run: |
#        black --check --diff app/ tests/
#
#    - name: Check import sorting with isort
#      run: |
#        isort --check-only --diff app/ tests/
#
#    - name: Type checking with mypy
#      run: |
#        mypy app/ --ignore-missing-imports || true

  summary:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: always()

    steps:
    - name: PR Check Summary
      run: |
        echo "## PR Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Tests**: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build**: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Security Scan**: disabled" >> $GITHUB_STEP_SUMMARY
        echo "- **Code Quality**: disabled" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Debug: Show actual values being compared
        echo "Debug - Test result: '${{ needs.test.result }}'" >> $GITHUB_STEP_SUMMARY
        echo "Debug - Build result: '${{ needs.build.result }}'" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Store results in variables for cleaner logic
        TEST_RESULT="${{ needs.test.result }}"
        BUILD_RESULT="${{ needs.build.result }}"
        
        echo "Evaluating all job results:" >> $GITHUB_STEP_SUMMARY
        echo "  - TEST_RESULT='$TEST_RESULT'" >> $GITHUB_STEP_SUMMARY
        echo "  - BUILD_RESULT='$BUILD_RESULT'" >> $GITHUB_STEP_SUMMARY
        echo "  - SECURITY_RESULT='disabled'" >> $GITHUB_STEP_SUMMARY
        echo "  - CODE_QUALITY='disabled'" >> $GITHUB_STEP_SUMMARY
        
        # Check if all jobs succeeded (excluding disabled security and code-quality)
        if [[ "$TEST_RESULT" == "success" ]] && [[ "$BUILD_RESULT" == "success" ]]; then
          echo "✅ All checks passed!" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Some checks failed!" >> $GITHUB_STEP_SUMMARY
          echo "  - Test result: $TEST_RESULT" >> $GITHUB_STEP_SUMMARY
          echo "  - Build result: $BUILD_RESULT" >> $GITHUB_STEP_SUMMARY
          echo "  - Security result: disabled" >> $GITHUB_STEP_SUMMARY
          echo "  - Code quality: disabled" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
